load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load(
    "//ruby:defs.bzl",
    "ruby_binary",
    "ruby_test",
)
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
)

# Checks if args are correctly passed to the ruby script.
ruby_test(
    name = "args_check_ruby_test",
    size = "small",
    srcs = ["args_check.rb"],
    args = [
        "foo",
        "bar",
        "baz",
    ],
    main = "args_check.rb",
)

ruby_binary(
    name = "args_check",
    srcs = ["args_check.rb"],
)

# Checks if a ruby_binary is a valid src in sh_* rules
sh_test(
    name = "args_check_sh_test",
    size = "small",
    srcs = ["args_check"],
    args = [
        "foo",
        "bar",
        "baz",
    ],
)

ruby_test(
    name = "include_order_check",
    size = "small",
    srcs = ["include_order_check.rb"],
    deps = [
        "//ruby/tests/testdata:a",
        "//ruby/tests/testdata:b",
        "//ruby/tests/testdata:c",
        "//ruby/tests/testdata:f",
    ],
)

# Tests if :ruby_bin can run in sh_binary
sh_test(
    name = "runtime_run_ruby_test",
    size = "small",
    srcs = ["runtime_run_ruby_test.sh"],
    args = [
        "$(location args_check.rb)",
        "foo",
        "bar",
        "baz",
    ],
    data = [
        "args_check.rb",
        "@ruby-system//:ruby_bin",
    ],
)

# Tests if :ruby_bin can run in genrule
genrule(
    name = "generate_genrule_run_ruby_test",
    outs = ["genrules_run_ruby_test.sh"],
    cmd = " && ".join([
        ("$(location @ruby-system//:ruby_bin) " +
         "$(location args_check.rb) foo bar baz"),
        "echo '#!/bin/sh -e' > $@",
        "echo true >> $@",
    ]),
    message = "Running ruby_bin in genrule",
    output_to_bindir = 1,
    tools = [
        "args_check.rb",
        "@ruby-system//:ruby_bin",
        "@ruby-system//:runtime",
    ],
)

sh_test(
    name = "genrule_run_ruby_test",
    size = "small",
    srcs = ["genrules_run_ruby_test.sh"],
)

## Runfiles resolution tests
#
# As explained in
#   https://github.com/bazelbuild/rules_nodejs/blob/be7232ecfd487432072938f3a39886be32f02606/internal/node/node_launcher.sh#L49,
# the runfiles resolution in a program X need to support the following cases
#
#   1a) directly by a user, with $0 in the output tree
#   1b) via 'bazel run' (similar to case 1a)
#   2) directly by a user, with $0 in X's runfiles
#   3) by another program Y which has a data dependency on X, with $0 in Y's
#      runfiles
#   4a) via 'bazel test'
#   4b) case 3 in the context of a test
#   5a) by a genrule cmd, with $0 in the output tree
#   6a) case 3 in the context of a genrule
#
# Also all of the cases above must correctly configure environment variables
# so that their sub-processes with binaries generated by Bazel can run with
# their runfiles.

ruby_binary(
    name = "load_path_in_runfiles",
    srcs = ["load_path_in_runfiles_test.rb"],
    main = "load_path_in_runfiles_test.rb",
    deps = [
        "//ruby/tests/testdata:g",
        "@rules_ruby_ruby_tests_testdata_another_workspace//baz/qux:j",
    ],
)

sh_binary(
    name = "load_path_in_runfiles_sh_binary",
    srcs = [":load_path_in_runfiles"],
)

# runfiles resolution test (case 4a)
ruby_test(
    name = "load_path_in_runfiles_test_4a",
    size = "small",
    srcs = ["load_path_in_runfiles_test.rb"],
    main = "load_path_in_runfiles_test.rb",
    deps = [
        "//ruby/tests/testdata:g",
        "@rules_ruby_ruby_tests_testdata_another_workspace//baz/qux:j",
    ],
)

# runfiles resolution test (case 4b)
sh_test(
    name = "load_path_in_runfiles_test_4b",
    size = "small",
    srcs = ["load_path_in_runfiles_test_3.sh"],
    data = [":load_path_in_runfiles_sh_binary"],
)

genrule(
    name = "generate_loadpath_test_driver_3",
    outs = ["load_path_in_runfiles_test_3.sh"],
    cmd = " && ".join([
        "echo '#!/bin/sh -e' > $@",
        "echo 'exec ruby/tests/load_path_in_runfiles' >> $@",
    ]),
    executable = True,
)

# runfiles resolution test (case 5a)
sh_test(
    name = "load_path_in_runfiles_test_5a",
    size = "small",
    srcs = ["load_path_in_runfiles_test_5a.sh"],
)

genrule(
    name = "dummy_genfile_load_path_in_runfiles",
    outs = ["load_path_in_runfiles_test_5a.sh"],
    cmd = " && ".join([
        "$(location :load_path_in_runfiles)",
        "echo '#!/bin/sh -e' > $@",
        "echo 'true' >> $@",
    ]),
    executable = True,
    message = "Running :load_path_in_runfiles in genrule",
    tools = [":load_path_in_runfiles"],
)

# TODO(yugui) Add a test for case 6a.

## end of Runfiles resolution tests

cc_binary(
    name = "example_ext.so",
    testonly = True,
    srcs = ["example_ext.c"],
    linkshared = True,
    deps = ["@ruby-system//:headers"],
)

cc_library(
    name = "example_ext_lib",
    testonly = True,
    srcs = ["example_ext.c"],
    linkstatic = True,
    tags = ["manual"],
    deps = ["@ruby-system//:headers"],
    alwayslink = True,
)

apple_binary(
    name = "example_ext",
    testonly = True,
    binary_type = "loadable_bundle",
    linkopts = [
        "-undefined,dynamic_lookup",
        "-multiply_defined,suppress",
    ],
    platform_type = "macos",
    tags = ["manual"],
    deps = [
        ":example_ext_lib",
    ],
)

genrule(
    name = "gen_example_ext",
    testonly = True,
    srcs = [":example_ext"],
    outs = ["example_ext.bundle"],
    cmd = "cp $< $@",
    tags = ["manual"],
)

config_setting(
    name = "requires_bundle",
    constraint_values = ["@platforms//os:osx"],
)

ruby_test(
    name = "ext_test",
    size = "small",
    srcs = ["ext_test.rb"],
    data = select({
        ":requires_bundle": ["example_ext.bundle"],
        "//conditions:default": ["example_ext.so"],
    }),
    main = "ext_test.rb",
)

## Containerization test

# TODO(yugui) Make it easier to build a tar with the right runfiles structure
pkg_tar(
    name = "load_path_in_runfiles_container_layer",
    srcs = [":load_path_in_runfiles"],
    include_runfiles = True,
    package_dir = "/app",
    remap_paths = {
        "ruby": "load_path_in_runfiles.runfiles/rules_ruby/ruby",
        ".": "load_path_in_runfiles.runfiles/",
    },
    strip_prefix = "dummy",
    symlinks = {
        "/app/load_path_in_runfiles.runfiles/rules_ruby/external": "/app/load_path_in_runfiles.runfiles",
        "/app/load_path_in_runfiles": "/app/load_path_in_runfiles.runfiles/rules_ruby/ruby/tests/load_path_in_runfiles",
    },
)

# container_image(
#     name = "load_path_in_runfiles_container_image",
#     base = "@ruby_base_container//image",
#     entrypoint = ["/app/load_path_in_runfiles"],
#     tars = [":load_path_in_runfiles_container_layer"],
# )

# sh_test(
#     name = "load_path_in_runfiles_container_test",
#     size = "small",
#     srcs = ["container_test.sh"],
#     args = [
#         "$(location :load_path_in_runfiles_container_image)",
#         "bazel/ruby/tests:load_path_in_runfiles_container_image",
#     ],
#     data = [":load_path_in_runfiles_container_image"],
#     tags = ["docker"],
# )
