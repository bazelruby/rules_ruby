#!/usr/bin/env bash

[[ -x bin/deps ]] && source bin/deps

[[ -z "${BashMatic}" ]] && {
  echo "Failed to initialize BASH library."
  exit 1
}

function setup::linux::deps() {
  if [[ -z $(command -v apt-get) ]]; then
    [[ -n $(command -v curl) && -n $(command -v wget) ]] && return 0
  else
    error "Unable to find the right packaging tool to install dependencies."
    exit 1
  fi

  [[ -n $(command -v curl) && -n $(command -v wget) ]] || {
    error "curl and wget must be pre-installed."
    exit 2
  }
}

function setup::linux() {
  local version="${1}"

  [[ -z "${version}" && -f .bazelversion ]] && version=$(cat .bazelversion | tr -d '\n')

  if [[ -z "${version}" ]]; then
    echo "Usage: setup-linux BAZEL-VERSION" >&2
    exit 1
  else
    hl::subtle "Installing Bazel version ${version}"
  fi

  # Ensure we have the tools like curl and wget installed
  setup::linux::deps

  local installer="bazel-${version}-installer-linux-x86_64.sh"
  local release_base_uri="https://github.com/bazelbuild/bazel/releases/download/${version}"
  local require_install=true

  local installer_path="${HOME}/.ruby_local"
  local installer_exe="${installer_path}/${installer_exe}"

  if [[ -x "${installer_exe}" ]]; then
    if curl "${release_base_uri}/${installer}.sha256" | sha256sum -c; then
      require_install=false
    fi
  fi

  if ${require_install}; then
    run "rm -rf ${installer_path}"
    run "mkdir -p ${installer_path}"
    run "cd ${installer_path}"
    run "wget ${release_base_uri}/${installer}"
    run "chmod +x ${installer}"

    run::set-next show-output-on
    run "./${installer_exe} --prefix=${installer_path} --base=${HOME}/.bazel"
  fi
}

setup::linux "$@"
